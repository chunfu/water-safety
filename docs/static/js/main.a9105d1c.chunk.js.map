{"version":3,"sources":["components/ExcelUploader/index.js","components/CountyTabView/index.js","const/index.js","components/RiverTabView/index.js","components/MapView/countyConfig.js","components/MapView/riverConfig.js","components/MapView/CustomizedMarker.js","components/MapView/index.js","App.js","serviceWorker.js","index.js"],"names":["getColor","props","isDragActive","Container","styled","div","_templateObject","ExcelUploader","_ref","onDropFile","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","sheetsData","data","workbook","xlsx","type","SheetNames","reduce","acc","sheet","ws","Sheets","Object","objectSpread","defineProperty","sheet_to_json","raw","excel2json","result","readAsArrayBuffer","_useDropzone","useDropzone","accept","getRootProps","getInputProps","isDragAccept","isDragReject","react_default","a","createElement","TabViewContainer","CountyTabView_templateObject","displayOrder","ContentStyle","_templateObject2","Table","table","_templateObject3","YearlyAccidentsTable","isEmpty","keys","sort","b","map","y","accidents","accident","DangerRiverTable","_ref2","rivers","r","i","rowspan","length","CountyTabView","_useState","useState","_useState2","slicedToArray","selectedItemIndex","setSelectedItemIndex","config","_config$accidentData","accidentData","yearlyAccidents","groupBy","dangerRivers","items","useMemo","name","content","CountyTabView_YearlyAccidentsTable","CountyTabView_DangerRiverTable","names","gestalt_es","color","size","align","onChange","_ref3","activeIndex","RiverTabView_templateObject","RiverTabView_templateObject2","RiverTabView_templateObject3","YearlyDeathTable","RiverTabView_Table","d","RealTimeReminder","RiverTabView","RiverTabView_YearlyDeathTable","history","RiverTabView_RealTimeReminder","RiverTabView_TabViewContainer","assign","RiverTabView_ContentStyle","defaultCountyConfig","changhua","geojson","chiayi","chiayicity","hsinchu","hsinchucity","hualien","kaohsiung","keelung","kinmen","lienchiang","miaoli","nantou","newtaipei","penghu","pingtung","taichung","tainan","taipei","taitung","taoyuan","yilan","yunlin","countyKeys","defaultRiverConfig","景美溪","location","基隆河","riverKeys","divIcon","L","className","CustomizedMarker","children","Marker","icon","SelectListContainer","MapView_templateObject","countySelectOptions","value","label","concat","key","geoJsonStyle","weight","fillOpacity","geoJsonFocusStyle","fillColor","mapProps","center","zoom","initState","selectedCounty","selectedRiver","reducer","state","action","_action$cb","cb","MapView","countyConfig","updateCountyConfig","_useReducer","useReducer","_useReducer2","dispatch","onSelectCountyCb","newCountyConfig","style","onSelectRiverCb","onSelectCounty","countyKey","makeAccidentData","_obj","sheetName","record","Fragment","components_ExcelUploader","county","find","indexOf","warn","options","react_draggable_min_default","components_CountyTabView","components_RiverTabView","Map","TileLayer","url","attribution","_countyConfig$key","_countyConfig$key$sty","index_es","feature","onClick","MapView_CustomizedMarker","position","IndexContext","React","createContext","App","Provider","components_MapView","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9105d1c.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport * as xlsx from 'xlsx';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst excel2json = (data) => {\n  const workbook = xlsx.read(data, { type: 'buffer' });\n  const sheets = workbook.SheetNames;\n  const sheetsData = sheets.reduce((acc, sheet) => {\n    const ws = workbook.Sheets[sheet];\n    return {\n      ...acc,\n      [sheet]: xlsx.utils.sheet_to_json(ws, { raw: false }),\n    };\n  }, {});\n\n  return sheetsData;\n}\n\nconst getColor = props => {\n  if (props.isDragActive) {\n    return '#cfcfcf';\n  }\n  return '#eeeeee';\n};\n\nconst Container = styled.div`\n  position: absolute;\n  z-index: 1000;\n  right: 5vw;\n  bottom: 5vh;\n  background: #cfcfcf;\n  padding: 10px;\n  width: 200px;\n  text-align: center;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${props => getColor(props)};\n  border-style: dashed;\n  color: ${props => getColor(props)};\n  outline: none;\n  transition: border 0.24s ease-in-out;\n  transition: color 0.24s ease-in-out;\n  cursor: pointer;\n`;\n\nconst ExcelUploader = ({ onDropFile }) => {\n  const onDrop = useCallback(\n    acceptedFiles => {\n      // Do something with the files\n      acceptedFiles.forEach(file => {\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log('file reading was aborted');\n        reader.onerror = () => console.log('file reading has failed');\n        reader.onload = () => {\n          // Do whatever you want with the file contents\n          const binaryStr = reader.result;\n          const sheetsData = excel2json(binaryStr);\n          onDropFile(sheetsData);\n        };\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    [onDropFile],\n  );\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ onDrop, accept: '.xlsx' });\n\n  return (\n    <Container {...getRootProps({ isDragActive, isDragAccept, isDragReject })}>\n      <input {...getInputProps()} />\n      <h3>拖拉上傳歷年資料</h3>\n    </Container>\n  );\n};\n\nexport default ExcelUploader;\n","import React, { useState, useMemo } from 'react';\nimport { SegmentedControl } from 'gestalt';\nimport styled from 'styled-components';\nimport { isEmpty } from 'lodash';\nimport { Heading } from 'gestalt';\nimport { eventAm, eventLocation, eventYear, eventMonth } from '../../const';\nimport { groupBy } from 'lodash';\n\nconst TabViewContainer = styled.div`\n  position: absolute;\n  left: 5vw;\n  top: 15vh;\n  width: 30vw;\n  z-index: ${(props) => props.displayOrder || 1001};\n  cursor: move;\n  background: white;\n  border-radius: 8px;\n`;\n\nconst ContentStyle = styled.div`\n  padding: 5px 10px;\n  overflow: auto;\n  height: 60vh;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  &,\n  th,\n  td {\n    border: 1px solid black;\n  }\n  td {\n    text-align: center;\n  }\n  th:first-child {\n    width: 180px;\n  }\n`;\n\nconst YearlyAccidentsTable = ({ data }) => {\n  if (isEmpty(data)) return <h1>無資料顯示</h1>;\n\n  const years = Object.keys(data);\n  return years.sort((a, b) => b -a ).map((y) => {\n    const accidents = data[y];\n    return (\n      <div>\n        <h2>{y}</h2>\n        <Table>\n          <tr>\n            <th>地區</th>\n            <th>發生時間</th>\n            <th>發生時段</th>\n          </tr>\n          {accidents.map((accident) => (\n            <tr>\n              <td>{accident[eventLocation]}</td>\n              <td>{accident[eventMonth]}</td>\n              <td>{accident[eventAm]}</td>\n            </tr>\n          ))}\n        </Table>\n      </div>\n    );\n  });\n};\n\nconst DangerRiverTable = ({ data }) => {\n  if (isEmpty(data)) return <h1>無資料顯示</h1>;\n\n  const rivers = Object.keys(data);\n  return (\n    <Table>\n      <tr>\n        <th>地區</th>\n        <th>年度</th>\n        <th>月份</th>\n        <th>時段</th>\n      </tr>\n      {rivers.map((r) => {\n        const accidents = data[r];\n        return accidents.sort((a, b) => b[eventYear] - a[eventYear]).map((accident, i) => {\n          return (\n            <tr>\n              {i === 0 && <td rowspan={accidents.length}>{r}</td>}\n              <td>{accident[eventYear]}</td>\n              <td>{accident[eventMonth]}</td>\n              <td>{accident[eventAm]}</td>\n            </tr>\n          );\n        });\n      })}\n    </Table>\n  );\n};\n\nconst CountyTabView = (props) => {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(0);\n  const { config } = props;\n  const { accidentData = [] } = config;\n  const yearlyAccidents = groupBy(accidentData, eventYear);\n  const dangerRivers = groupBy(accidentData, eventLocation);\n\n  const items = useMemo(\n    () => [\n      {\n        name: '發生學生溺水死亡意外之水域',\n        content: <YearlyAccidentsTable data={yearlyAccidents} />,\n      },\n      {\n        name: '重覆發生學生溺水死亡意外之水域',\n        content: <DangerRiverTable data={dangerRivers} />,\n      },\n    ],\n    [yearlyAccidents, dangerRivers],\n  );\n\n  const names = items.map((i) => i.name);\n\n  const handleOnChange = ({ activeIndex }) => setSelectedItemIndex(activeIndex);\n\n  return (\n    <TabViewContainer {...props}>\n      <Heading color=\"gray\" size=\"md\" align=\"center\">\n        {config.name[0]}\n      </Heading>\n      <SegmentedControl\n        selectedItemIndex={selectedItemIndex}\n        onChange={handleOnChange}\n        items={names}\n      />\n      <ContentStyle>{items[selectedItemIndex].content}</ContentStyle>\n    </TabViewContainer>\n  );\n};\n\nexport default CountyTabView;\n","const eventCounty = '發生所在縣市';\nconst eventLocation = '發生地點名稱(調)';\nconst eventMonth = '發生月份';\nconst eventAm = '發生時段(上/下午)';\nconst eventYear = '年度';\n\nexport {\n  eventCounty,\n  eventLocation,\n  eventYear,\n  eventMonth,\n  eventAm,\n};\n","import React, { useState, useEffect } from 'react';\nimport { SegmentedControl } from 'gestalt';\nimport styled from 'styled-components';\nimport { isEmpty } from 'lodash';\nimport { Heading } from 'gestalt';\n\nconst TabViewContainer = styled.div`\n  position: absolute;\n  left: 5vw;\n  top: 15vh;\n  width: 30vw;\n  z-index: ${props => props.displayOrder || 1001};\n  cursor: move;\n  background: white;\n  border-radius: 8px;\n`;\n\nconst ContentStyle = styled.div`\n  padding: 5px 10px;\n  overflow: auto;\n  height: 60vh;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  &,\n  th,\n  td {\n    border: 1px solid black;\n  }\n  td {\n    text-align: center;\n  }\n`;\n\nconst YearlyDeathTable = ({ data }) => {\n  if (isEmpty(data)) return <h1>無資料顯示</h1>;\n\n  return (\n    <div>\n      <Table>\n        <tr>\n          <th>年度</th>\n          <th>全國</th>\n          <th>學生</th>\n        </tr>\n        {data.map((d) => (\n          <tr>\n            <td>{d[0]}</td>\n            <td>{d[1]}</td>\n            <td>{d[2]}</td>\n          </tr>\n        ))}\n      </Table>\n    </div>\n  );\n};\n\nconst RealTimeReminder = (props) => {\n  return (\n    <Table>\n      <tr>\n        <td>雨量</td>\n        <td>豪雨</td>\n      </tr>\n      <tr>\n        <td>河川水位</td>\n        <td>上升</td>\n      </tr>\n    </Table>\n  );\n};\n\nconst RiverTabView = (props) => {\n  const { config, displayOrder } = props;\n  const [selectedItemIndex, setSelectedItemIndex] = useState(0);\n\n  const items = [\n    {\n      name: '歷年溺水死亡人數紀錄',\n      content: <YearlyDeathTable data={config.history} />,\n    },\n    { name: '即時風險因子提醒', content: <RealTimeReminder /> },\n  ];\n  const names = items.map((i) => i.name);\n\n  const handleOnChange = ({ activeIndex }) => setSelectedItemIndex(activeIndex);\n\n  return (\n    <TabViewContainer {...props} displayOrder={displayOrder} >\n      <Heading color=\"gray\" size=\"md\" align=\"center\">\n        {config.name}\n      </Heading>\n      <SegmentedControl\n        selectedItemIndex={selectedItemIndex}\n        onChange={handleOnChange}\n        items={names}\n      />\n      <ContentStyle>{items[selectedItemIndex].content}</ContentStyle>\n    </TabViewContainer>\n  );\n};\n\nexport default RiverTabView;\n","import ChanghuaGeoJson from '../../geojson/changhua.json';\nimport ChiayiGeoJson from '../../geojson/chiayi.json';\nimport ChiayiCityGeoJson from '../../geojson/chiayicity.json';\nimport HsinchuGeoJson from '../../geojson/hsinchu.json';\nimport HsinchuCityGeoJson from '../../geojson/hsinchucity.json';\nimport HualienGeoJson from '../../geojson/hualien.json';\nimport KaohsiungGeoJson from '../../geojson/kaohsiung.json';\nimport KeelungGeoJson from '../../geojson/keelung.json';\nimport KinmenGeoJson from '../../geojson/kinmen.json';\nimport LienchiangGeoJson from '../../geojson/lienchiang.json';\nimport MiaoliGeoJson from '../../geojson/miaoli.json';\nimport NantouGeoJson from '../../geojson/nantou.json';\nimport NewTaipeiGeoJson from '../../geojson/newtaipei.json';\nimport PenghuGeoJson from '../../geojson/penghu.json';\nimport PingtungGeoJson from '../../geojson/pingtung.json';\nimport TaichungGeoJson from '../../geojson/taichung.json';\nimport TainanGeoJson from '../../geojson/tainan.json';\nimport TaipeiGeoJson from '../../geojson/taipei.json';\nimport TaitungGeoJson from '../../geojson/taitung.json';\nimport TaoyuanGeoJson from '../../geojson/taoyuan.json';\nimport YilanGeoJson from '../../geojson/yilan.json';\nimport YunlinGeoJson from '../../geojson/yunlin.json';\n\n// same county can have multiple name\nconst defaultCountyConfig = {\n  changhua: { name: ['彰化縣'], geojson: ChanghuaGeoJson },\n  chiayi: { name: ['嘉義縣'], geojson: ChiayiGeoJson },\n  chiayicity: { name: ['嘉義市'], geojson: ChiayiCityGeoJson },\n  hsinchu: { name: ['新竹縣'], geojson: HsinchuGeoJson },\n  hsinchucity: { name: ['新竹市'], geojson: HsinchuCityGeoJson },\n  hualien: { name: ['花蓮縣'], geojson: HualienGeoJson },\n  kaohsiung: { name: ['高雄市', '高雄縣'], geojson: KaohsiungGeoJson },\n  keelung: { name: ['基隆市'], geojson: KeelungGeoJson },\n  kinmen: { name: ['金門縣'], geojson: KinmenGeoJson },\n  lienchiang: { name: ['連江縣'], geojson: LienchiangGeoJson },\n  miaoli: { name: ['苗栗縣'], geojson: MiaoliGeoJson },\n  nantou: { name: ['南投縣'], geojson: NantouGeoJson },\n  newtaipei: { name: ['新北市', '台北縣', '臺北縣'], geojson: NewTaipeiGeoJson },\n  penghu: { name: ['澎湖縣'], geojson: PenghuGeoJson },\n  pingtung: { name: ['屏東縣'], geojson: PingtungGeoJson },\n  taichung: { name: ['台中市', '臺中市', '台中縣', '臺中縣'], geojson: TaichungGeoJson },\n  tainan: { name: ['台南市', '臺南市', '台南縣', '臺南縣'], geojson: TainanGeoJson },\n  taipei: { name: ['台北市', '臺北市'], geojson: TaipeiGeoJson },\n  taitung: { name: ['台東縣', '臺東縣', '台東市'], geojson: TaitungGeoJson },\n  taoyuan: { name: ['桃園縣', '桃園市'], geojson: TaoyuanGeoJson },\n  yilan: { name: ['宜蘭縣'], geojson: YilanGeoJson },\n  yunlin: { name: ['雲林縣'], geojson: YunlinGeoJson },\n};\n\nconst countyKeys = Object.keys(defaultCountyConfig);\n\nexport { defaultCountyConfig, countyKeys };\n","const defaultRiverConfig = {\n  景美溪: {\n    name: '景美溪',\n    location: [25.009388, 121.633986],\n    history: [\n      [108, 2, 1],\n      [107, 0, 0],\n      [106, 2, 0],\n      [105, 1, 0],\n      [104, 1, 0],\n    ],\n  },\n  基隆河: {\n    name: '基隆河',\n    location: [25.023513, 121.728149],\n    history: [\n      [108, 3, 2],\n      [107, 1, 1],\n      [106, 3, 1],\n      [105, 2, 1],\n      [104, 2, 1],\n    ],\n  },\n};\n\nconst riverKeys = Object.keys(defaultRiverConfig);\n\nexport { defaultRiverConfig, riverKeys };\n","import React from 'react';\nimport { Marker } from 'react-leaflet';\nimport L from 'leaflet';\nconst divIcon = new L.divIcon({ className: 'marker-div-icon' });\n\nconst CustomizedMarker = props => {\n  const { children } = props;\n  return (\n    <Marker {...props} icon={divIcon}>\n      {children}\n    </Marker>\n  );\n};\n\nexport default CustomizedMarker;\n","import React, { useState, useEffect, useReducer } from 'react';\nimport { Map, TileLayer, Popup } from 'react-leaflet';\nimport { GeoJSONFillable } from 'react-leaflet-geojson-patterns';\nimport { SelectList } from 'gestalt';\nimport styled from 'styled-components';\nimport Draggable from 'react-draggable';\nimport ExcelUploader from '../ExcelUploader';\nimport CountyTabView from '../CountyTabView';\nimport RiverTabView from '../RiverTabView';\nimport { defaultCountyConfig, countyKeys } from './countyConfig';\nimport { defaultRiverConfig, riverKeys } from './riverConfig';\nimport CustomizedMarker from './CustomizedMarker';\nimport {\n  eventCounty,\n  eventAm,\n  eventLocation,\n  eventYear,\n  eventMonth,\n} from '../../const';\n\nconst SelectListContainer = styled.div`\n  position: absolute;\n  right: 5vw;\n  top: 15vh;\n  width: 200px;\n  z-index: 1001;\n`;\n\nconst countySelectOptions = [{ value: '', label: '選擇縣市' }].concat(\n  countyKeys.map((key) => ({\n    value: key,\n    label: defaultCountyConfig[key].name[0],\n  })),\n);\n\nconst geoJsonStyle = {\n  color: 'black',\n  weight: 2,\n  fillOpacity: 0,\n};\n\nconst geoJsonFocusStyle = {\n  ...geoJsonStyle,\n  fillOpacity: 1,\n  fillColor: '#FDC500',\n};\n\nconst mapProps = {\n  center: [23.973837, 120.9775031],\n  zoom: 8,\n};\n\nconst TYPE_SELECT_COUTY = 'selectCounty';\nconst TYPE_SELECT_RIVER = 'selectRiver';\nconst initState = {\n  selectedCounty: '',\n  selectedRiver: '',\n};\n\n// TODO: should be calling cleanup cb automatically\nconst reducer = (state, action) => {\n  const { type, value, cb = () => {} } = action;\n  switch (type) {\n    case TYPE_SELECT_COUTY:\n      cb(value);\n      return {\n        ...state,\n        selectedCounty: value,\n        selectedRiver: '',\n      };\n    case TYPE_SELECT_RIVER:\n      cb(value);\n      return {\n        ...state,\n        selectedCounty: '',\n        selectedRiver: value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst MapView = (props) => {\n  const [countyConfig, updateCountyConfig] = useState(defaultCountyConfig);\n  const [state, dispatch] = useReducer(reducer, initState);\n  const { selectedRiver, selectedCounty } = state;\n\n  const onSelectCountyCb = (selectedCounty) => {\n    const newCountyConfig = countyKeys.reduce((acc, key) => {\n      const config = countyConfig[key];\n      // reset others' style\n      const style = key === selectedCounty ? geoJsonFocusStyle : geoJsonStyle;\n      return {\n        ...acc,\n        [key]: {\n          ...config,\n          style,\n        },\n      };\n    }, {});\n    updateCountyConfig(newCountyConfig);\n  };\n\n  const onSelectRiverCb = () => onSelectCountyCb('');\n\n  const onSelectCounty = (countyKey) => {\n    dispatch({\n      type: TYPE_SELECT_COUTY,\n      value: countyKey,\n      cb: onSelectCountyCb,\n    });\n  };\n\n  const onSelectRiver = (riverKey) => {\n    dispatch({\n      type: TYPE_SELECT_RIVER,\n      value: riverKey,\n      cb: onSelectRiverCb,\n    });\n  };\n\n  const makeAccidentData = ({ sheetName, record }) => {\n    const obj = {\n      [eventLocation]: record[eventLocation],\n      [eventYear]: sheetName,\n      [eventMonth]: record[eventMonth],\n      [eventAm]: record[eventAm],\n    };\n    return obj;\n  };\n\n  const onDropFile = (sheetsData) => {\n    let newCountyConfig = { ...countyConfig };\n    Object.keys(sheetsData).forEach((sheetName) => {\n      // iterate data from each sheet\n      const dataArr = sheetsData[sheetName];\n      dataArr.forEach((d) => {\n        // iterate each record from data\n\n        // find the corresponding county config\n        const county = countyKeys.find(\n          (countyKey) =>\n            newCountyConfig[countyKey].name.indexOf(d[eventCounty]) > -1,\n        );\n\n        if (!county) {\n          // edge case, print it out\n          console.warn(d[eventCounty], d);\n          return;\n        }\n\n        let config = newCountyConfig[county];\n\n        // insert current record into county config\n        let { accidentData = [] } = config;\n\n        config = {\n          ...config,\n          accidentData: accidentData.concat(\n            makeAccidentData({\n              sheetName,\n              record: d,\n            }),\n          ),\n        };\n\n        newCountyConfig = {\n          ...newCountyConfig,\n          [county]: config,\n        };\n      });\n    });\n\n    // update insert new event into that config\n    updateCountyConfig(newCountyConfig);\n  };\n\n  return (\n    <>\n      <ExcelUploader onDropFile={onDropFile} />\n      <SelectListContainer>\n        <SelectList\n          options={countySelectOptions}\n          label=\"台灣縣市\"\n          value={selectedCounty}\n          onChange={({ value }) => {\n            onSelectCounty(value);\n          }}\n        />\n      </SelectListContainer>\n      {selectedCounty && (\n        <Draggable>\n          <CountyTabView config={countyConfig[selectedCounty]} />\n        </Draggable>\n      )}\n      {selectedRiver && (\n        <Draggable>\n          <RiverTabView config={defaultRiverConfig[selectedRiver]} />\n        </Draggable>\n      )}\n      <Map {...mapProps}>\n        <TileLayer\n          url=\"http://tile.mtbmap.cz/mtbmap_tiles/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &amp; USGS'\n        />\n        {/* https://leaflet-extras.github.io/leaflet-providers/preview/ */}\n        {/* <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        /> */}\n        {countyKeys.map((key) => {\n          const { geojson, style = geoJsonStyle } = countyConfig[key];\n          return (\n            <GeoJSONFillable\n              data={geojson}\n              style={(feature) => style}\n              onClick={() => {\n                onSelectCounty(key);\n              }}\n            />\n          );\n        })}\n        {riverKeys.map((key) => {\n          const { location } = defaultRiverConfig[key];\n          return (\n            <CustomizedMarker\n              position={location}\n              onClick={() => onSelectRiver(key)}\n            ></CustomizedMarker>\n          );\n        })}\n      </Map>\n    </>\n  );\n};\n\nexport default MapView;\n","import React, { useState, useEffect } from 'react';\nimport MapView from './components/MapView';\n\nimport 'gestalt/dist/gestalt.css';\nimport './App.css';\n\nexport const IndexContext = React.createContext({});\n\nconst App = props => {\n  return (\n    <IndexContext.Provider>\n      <MapView />\n    </IndexContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}