{"version":3,"sources":["components/MapView/TabView.js","components/MapView/RiverTabView.js","components/MapView/countyConfig.js","components/MapView/riverConfig.js","components/MapView/ExcelUploader.js","components/MapView/CustomizedMarker.js","components/MapView/index.js","App.js","serviceWorker.js","index.js"],"names":["TabViewContainer","styled","div","_templateObject","props","displayOrder","ContentStyle","_templateObject2","Table","table","_templateObject3","YearlyAccidentsTable","_ref","data","isEmpty","react_default","a","createElement","Object","keys","map","y","accidents","accident","TabView","_useState","useState","_useState2","slicedToArray","selectedItemIndex","setSelectedItemIndex","config","_config$yearlyAcciden","yearlyAccidents","items","name","content","TabView_YearlyAccidentsTable","names","i","gestalt_es","color","size","align","onChange","_ref2","activeIndex","RiverTabView_templateObject","RiverTabView_templateObject2","RiverTabView_templateObject3","YearlyDeathTable","RiverTabView_Table","d","RealTimeReminder","RiverTabView","RiverTabView_YearlyDeathTable","history","RiverTabView_RealTimeReminder","RiverTabView_TabViewContainer","assign","RiverTabView_ContentStyle","defaultCountyConfig","changhua","geojson","chiayi","chiayicity","hsinchu","hsinchucity","hualien","kaohsiung","keelung","kinmen","lienchiang","miaoli","nantou","newtaipei","penghu","pingtung","taichung","tainan","taipei","taitung","taoyuan","yilan","yunlin","countyKeys","defaultRiverConfig","景美溪","location","基隆河","riverKeys","getColor","isDragActive","Container","ExcelUploader_templateObject","ExcelUploader","onDropFile","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","sheetsData","workbook","xlsx","type","SheetNames","reduce","acc","sheet","ws","Sheets","objectSpread","defineProperty","sheet_to_json","raw","excel2json","result","readAsArrayBuffer","_useDropzone","useDropzone","accept","getRootProps","getInputProps","isDragAccept","isDragReject","divIcon","L","className","CustomizedMarker","children","Marker","icon","SelectListContainer","MapView_templateObject","countySelectOptions","value","label","concat","key","geoJsonStyle","weight","fillOpacity","geoJsonFocusStyle","fillColor","mapProps","center","zoom","initState","selectedCounty","selectedRiver","reducer","state","action","_action$cb","cb","MapView","countyConfig","updateCountyConfig","_useReducer","useReducer","_useReducer2","dispatch","resetContyStyle","newCountyConfig","style","onSelectCounty","countyKey","Fragment","MapView_ExcelUploader","sheetName","_accidents$push","county","find","indexOf","push","warn","options","react_draggable_min_default","MapView_TabView","MapView_RiverTabView","Map","TileLayer","attribution","url","_countyConfig$key","_countyConfig$key$sty","index_es","feature","onClick","MapView_CustomizedMarker","position","IndexContext","React","createContext","App","Provider","components_MapView","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a51b5608.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { SegmentedControl } from 'gestalt';\nimport styled from 'styled-components';\nimport { isEmpty } from 'lodash';\nimport { Heading } from 'gestalt';\n\nconst TabViewContainer = styled.div`\n  position: absolute;\n  left: 5vw;\n  top: 15vh;\n  width: 30vw;\n  z-index: ${props => props.displayOrder || 1001};\n  cursor: move;\n  background: white;\n  border-radius: 8px;\n`;\n\nconst ContentStyle = styled.div`\n  padding: 5px 10px;\n  overflow: auto;\n  height: 60vh;\n`;\n\nconst eventLocation = '發生地點名稱';\nconst eventMonth = '發生月份';\nconst eventAm = '發生時段(上/下午)';\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  &,\n  th,\n  td {\n    border: 1px solid black;\n  }\n  td {\n    text-align: center;\n  }\n`;\n\nconst YearlyAccidentsTable = ({ data }) => {\n  if (isEmpty(data)) return <h1>無資料顯示</h1>;\n\n  const years = Object.keys(data);\n  return years.map(y => {\n    const accidents = data[y];\n    return (\n      <div>\n        <h2>{y}</h2>\n        <Table>\n          <tr>\n            <th>地區</th>\n            <th>發生時間</th>\n            <th>發生時段</th>\n          </tr>\n          {accidents.map(accident => (\n            <tr>\n              <td>{accident[eventLocation]}</td>\n              <td>{accident[eventMonth]}</td>\n              <td>{accident[eventAm]}</td>\n            </tr>\n          ))}\n        </Table>\n      </div>\n    );\n  });\n};\n\nconst TabView = props => {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(0);\n  const { config } = props;\n  const { yearlyAccidents = {} } = config;\n\n  const items = [\n    {\n      name: '發生學生溺水死亡意外之水域',\n      content: <YearlyAccidentsTable data={yearlyAccidents} />,\n    },\n    { name: '重覆發生學生溺水死亡意外之水域', content: <h1>暫無資料</h1> },\n  ];\n  const names = items.map(i => i.name);\n\n  const handleOnChange = ({ activeIndex }) => setSelectedItemIndex(activeIndex);\n\n  return (\n    <TabViewContainer {...props} >\n      <Heading color=\"gray\" size=\"md\" align=\"center\">\n        {config.name[0]}\n      </Heading>\n      <SegmentedControl\n        selectedItemIndex={selectedItemIndex}\n        onChange={handleOnChange}\n        items={names}\n      />\n      <ContentStyle>{items[selectedItemIndex].content}</ContentStyle>\n    </TabViewContainer>\n  );\n};\n\nexport default TabView;\n","import React, { useState, useEffect } from 'react';\nimport { SegmentedControl } from 'gestalt';\nimport styled from 'styled-components';\nimport { isEmpty } from 'lodash';\nimport { Heading } from 'gestalt';\n\nconst TabViewContainer = styled.div`\n  position: absolute;\n  left: 5vw;\n  top: 15vh;\n  width: 30vw;\n  z-index: ${props => props.displayOrder || 1001};\n  cursor: move;\n  background: white;\n  border-radius: 8px;\n`;\n\nconst ContentStyle = styled.div`\n  padding: 5px 10px;\n  overflow: auto;\n  height: 60vh;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  &,\n  th,\n  td {\n    border: 1px solid black;\n  }\n  td {\n    text-align: center;\n  }\n`;\n\nconst YearlyDeathTable = ({ data }) => {\n  if (isEmpty(data)) return <h1>無資料顯示</h1>;\n\n  return (\n    <div>\n      <Table>\n        <tr>\n          <th>年度</th>\n          <th>全國</th>\n          <th>學生</th>\n        </tr>\n        {data.map((d) => (\n          <tr>\n            <td>{d[0]}</td>\n            <td>{d[1]}</td>\n            <td>{d[2]}</td>\n          </tr>\n        ))}\n      </Table>\n    </div>\n  );\n};\n\nconst RealTimeReminder = (props) => {\n  return (\n    <Table>\n      <tr>\n        <td>雨量</td>\n        <td>豪雨</td>\n      </tr>\n      <tr>\n        <td>河川水位</td>\n        <td>上升</td>\n      </tr>\n    </Table>\n  );\n};\n\nconst RiverTabView = (props) => {\n  const { config, displayOrder } = props;\n  const [selectedItemIndex, setSelectedItemIndex] = useState(0);\n\n  const items = [\n    {\n      name: '歷年溺水死亡人數紀錄',\n      content: <YearlyDeathTable data={config.history} />,\n    },\n    { name: '即時風險因子提醒', content: <RealTimeReminder /> },\n  ];\n  const names = items.map((i) => i.name);\n\n  const handleOnChange = ({ activeIndex }) => setSelectedItemIndex(activeIndex);\n\n  return (\n    <TabViewContainer {...props} displayOrder={displayOrder} >\n      <Heading color=\"gray\" size=\"md\" align=\"center\">\n        {config.name}\n      </Heading>\n      <SegmentedControl\n        selectedItemIndex={selectedItemIndex}\n        onChange={handleOnChange}\n        items={names}\n      />\n      <ContentStyle>{items[selectedItemIndex].content}</ContentStyle>\n    </TabViewContainer>\n  );\n};\n\nexport default RiverTabView;\n","import ChanghuaGeoJson from '../../geojson/changhua.json';\nimport ChiayiGeoJson from '../../geojson/chiayi.json';\nimport ChiayiCityGeoJson from '../../geojson/chiayicity.json';\nimport HsinchuGeoJson from '../../geojson/hsinchu.json';\nimport HsinchuCityGeoJson from '../../geojson/hsinchucity.json';\nimport HualienGeoJson from '../../geojson/hualien.json';\nimport KaohsiungGeoJson from '../../geojson/kaohsiung.json';\nimport KeelungGeoJson from '../../geojson/keelung.json';\nimport KinmenGeoJson from '../../geojson/kinmen.json';\nimport LienchiangGeoJson from '../../geojson/lienchiang.json';\nimport MiaoliGeoJson from '../../geojson/miaoli.json';\nimport NantouGeoJson from '../../geojson/nantou.json';\nimport NewTaipeiGeoJson from '../../geojson/newtaipei.json';\nimport PenghuGeoJson from '../../geojson/penghu.json';\nimport PingtungGeoJson from '../../geojson/pingtung.json';\nimport TaichungGeoJson from '../../geojson/taichung.json';\nimport TainanGeoJson from '../../geojson/tainan.json';\nimport TaipeiGeoJson from '../../geojson/taipei.json';\nimport TaitungGeoJson from '../../geojson/taitung.json';\nimport TaoyuanGeoJson from '../../geojson/taoyuan.json';\nimport YilanGeoJson from '../../geojson/yilan.json';\nimport YunlinGeoJson from '../../geojson/yunlin.json';\n\n// same county can have multiple name\nconst defaultCountyConfig = {\n  changhua: { name: ['彰化縣'], geojson: ChanghuaGeoJson },\n  chiayi: { name: ['嘉義縣'], geojson: ChiayiGeoJson },\n  chiayicity: { name: ['嘉義市'], geojson: ChiayiCityGeoJson },\n  hsinchu: { name: ['新竹縣'], geojson: HsinchuGeoJson },\n  hsinchucity: { name: ['新竹市'], geojson: HsinchuCityGeoJson },\n  hualien: { name: ['花蓮縣'], geojson: HualienGeoJson },\n  kaohsiung: { name: ['高雄市', '高雄縣'], geojson: KaohsiungGeoJson },\n  keelung: { name: ['基隆市'], geojson: KeelungGeoJson },\n  kinmen: { name: ['金門縣'], geojson: KinmenGeoJson },\n  lienchiang: { name: ['連江縣'], geojson: LienchiangGeoJson },\n  miaoli: { name: ['苗栗縣'], geojson: MiaoliGeoJson },\n  nantou: { name: ['南投縣'], geojson: NantouGeoJson },\n  newtaipei: { name: ['新北市', '台北縣', '臺北縣'], geojson: NewTaipeiGeoJson },\n  penghu: { name: ['澎湖縣'], geojson: PenghuGeoJson },\n  pingtung: { name: ['屏東縣'], geojson: PingtungGeoJson },\n  taichung: { name: ['台中市', '臺中市', '台中縣', '臺中縣'], geojson: TaichungGeoJson },\n  tainan: { name: ['台南市', '臺南市', '台南縣', '臺南縣'], geojson: TainanGeoJson },\n  taipei: { name: ['台北市', '臺北市'], geojson: TaipeiGeoJson },\n  taitung: { name: ['台東縣', '臺東縣', '台東市'], geojson: TaitungGeoJson },\n  taoyuan: { name: ['桃園縣', '桃園市'], geojson: TaoyuanGeoJson },\n  yilan: { name: ['宜蘭縣'], geojson: YilanGeoJson },\n  yunlin: { name: ['雲林縣'], geojson: YunlinGeoJson },\n};\n\nconst countyKeys = Object.keys(defaultCountyConfig);\n\nexport { defaultCountyConfig, countyKeys };\n","const defaultRiverConfig = {\n  景美溪: {\n    name: '景美溪',\n    location: [25.009388, 121.633986],\n    history: [\n      [108, 2, 1],\n      [107, 0, 0],\n      [106, 2, 0],\n      [105, 1, 0],\n      [104, 1, 0],\n    ],\n  },\n  基隆河: {\n    name: '基隆河',\n    location: [25.023513, 121.728149],\n    history: [\n      [108, 3, 2],\n      [107, 1, 1],\n      [106, 3, 1],\n      [105, 2, 1],\n      [104, 2, 1],\n    ],\n  },\n};\n\nconst riverKeys = Object.keys(defaultRiverConfig);\n\nexport { defaultRiverConfig, riverKeys };\n","import React, { useCallback } from 'react';\nimport * as xlsx from 'xlsx';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\n\nconst excel2json = (data) => {\n  const workbook = xlsx.read(data, { type: 'buffer' });\n  const sheets = workbook.SheetNames;\n  const sheetsData = sheets.reduce((acc, sheet) => {\n    const ws = workbook.Sheets[sheet];\n    return {\n      ...acc,\n      [sheet]: xlsx.utils.sheet_to_json(ws, { raw: false }),\n    };\n  }, {});\n\n  return sheetsData;\n}\n\nconst getColor = props => {\n  if (props.isDragActive) {\n    return '#cfcfcf';\n  }\n  return '#eeeeee';\n};\n\nconst Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 5px;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${props => getColor(props)};\n  border-style: dashed;\n  color: ${props => getColor(props)};\n  outline: none;\n  transition: border 0.24s ease-in-out;\n  transition: color 0.24s ease-in-out;\n  cursor: pointer;\n`;\n\nconst ExcelUploader = ({ onDropFile }) => {\n  const onDrop = useCallback(\n    acceptedFiles => {\n      // Do something with the files\n      acceptedFiles.forEach(file => {\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log('file reading was aborted');\n        reader.onerror = () => console.log('file reading has failed');\n        reader.onload = () => {\n          // Do whatever you want with the file contents\n          const binaryStr = reader.result;\n          const sheetsData = excel2json(binaryStr);\n          onDropFile(sheetsData);\n        };\n        reader.readAsArrayBuffer(file);\n      });\n    },\n    [onDropFile],\n  );\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ onDrop, accept: '.xlsx' });\n\n  return (\n    <Container {...getRootProps({ isDragActive, isDragAccept, isDragReject })}>\n      <input {...getInputProps()} />\n      <h3>拖拉上傳歷年資料</h3>\n    </Container>\n  );\n};\n\nexport default ExcelUploader;\n","import React from 'react';\nimport { Marker } from 'react-leaflet';\nimport L from 'leaflet';\nconst divIcon = new L.divIcon({ className: 'marker-div-icon' });\n\nconst CustomizedMarker = props => {\n  const { children } = props;\n  return (\n    <Marker {...props} icon={divIcon}>\n      {children}\n    </Marker>\n  );\n};\n\nexport default CustomizedMarker;\n","import React, { useState, useEffect, useReducer } from 'react';\nimport { Map, TileLayer, Popup } from 'react-leaflet';\nimport { GeoJSONFillable } from 'react-leaflet-geojson-patterns';\nimport { SelectList } from 'gestalt';\nimport styled from 'styled-components';\nimport Draggable from 'react-draggable';\nimport TabView from './TabView';\nimport RiverTabView from './RiverTabView';\nimport { defaultCountyConfig, countyKeys } from './countyConfig';\nimport { defaultRiverConfig, riverKeys } from './riverConfig';\nimport ExcelUploader from './ExcelUploader';\nimport CustomizedMarker from './CustomizedMarker';\n\nconst SelectListContainer = styled.div`\n  position: absolute;\n  right: 5vw;\n  top: 15vh;\n  width: 200px;\n  z-index: 1001;\n`;\n\nconst countySelectOptions = [{ value: '', label: '選擇縣市' }].concat(\n  countyKeys.map((key) => ({\n    value: key,\n    label: defaultCountyConfig[key].name[0],\n  })),\n);\n\nconst geoJsonStyle = {\n  color: 'black',\n  weight: 2,\n  fillOpacity: 0,\n};\n\nconst geoJsonFocusStyle = {\n  ...geoJsonStyle,\n  fillOpacity: 1,\n  fillColor: '#FDC500',\n};\n\nconst mapProps = {\n  center: [23.973837, 120.9775031],\n  zoom: 8,\n};\n\nconst TYPE_SELECT_COUTY = 'selectCounty';\nconst TYPE_SELECT_RIVER = 'selectRiver';\nconst initState = {\n  selectedCounty: '',\n  selectedRiver: '',\n};\nconst reducer = (state, action) => {\n  const { type, value, cb = () => {} } = action;\n  switch (type) {\n    case TYPE_SELECT_COUTY:\n      cb(value);\n      return {\n        ...state,\n        selectedCounty: value,\n        selectedRiver: '',\n      };\n    case TYPE_SELECT_RIVER:\n      cb(value);\n      return {\n        ...state,\n        selectedCounty: '',\n        selectedRiver: value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst MapView = (props) => {\n  const [countyConfig, updateCountyConfig] = useState(defaultCountyConfig);\n  const [state, dispatch] = useReducer(reducer, initState);\n  console.log(state);\n  const { selectedRiver, selectedCounty } = state;\n\n  const resetContyStyle = (selectedCounty) => {\n    const newCountyConfig = countyKeys.reduce((acc, key) => {\n      const config = countyConfig[key];\n      // reset others' style\n      const style = key === selectedCounty ? geoJsonFocusStyle : geoJsonStyle;\n      return {\n        ...acc,\n        [key]: {\n          ...config,\n          style,\n        },\n      };\n    }, {});\n    updateCountyConfig(newCountyConfig);\n  };\n\n  const onSelectCounty = (countyKey) => {\n    dispatch({\n      type: TYPE_SELECT_COUTY,\n      value: countyKey,\n      cb: resetContyStyle,\n    });\n  };\n\n  const onSelectRiver = (riverKey) => {\n    dispatch({\n      type: TYPE_SELECT_RIVER,\n      value: riverKey,\n      cb: resetContyStyle,\n    });\n  }\n\n  const onDropFile = (sheetsData) => {\n    const eventCounty = '發生所在縣市';\n    const eventLocation = '發生地點名稱';\n    const eventMonth = '發生月份';\n    const eventAm = '發生時段(上/下午)';\n\n    let newCountyConfig = { ...countyConfig };\n    Object.keys(sheetsData).forEach((sheetName) => {\n      // iterate data from each sheet\n      const dataArr = sheetsData[sheetName];\n      dataArr.forEach((d) => {\n        // iterate each record from data\n\n        // find the corresponding county config\n        const county = countyKeys.find(\n          (countyKey) =>\n            newCountyConfig[countyKey].name.indexOf(d[eventCounty]) > -1,\n        );\n\n        if (!county) {\n          // edge case, print it out\n          console.warn(d[eventCounty], d);\n          return;\n        }\n\n        let config = newCountyConfig[county];\n\n        // insert current record into county config\n        let { yearlyAccidents = {} } = config;\n        let accidents = yearlyAccidents[sheetName] || [];\n        accidents.push({\n          [eventLocation]: d[eventLocation],\n          [eventMonth]: d[eventMonth],\n          [eventAm]: d[eventAm],\n        });\n\n        config = {\n          ...config,\n          yearlyAccidents: {\n            ...yearlyAccidents,\n            [sheetName]: accidents,\n          },\n        };\n\n        newCountyConfig = {\n          ...newCountyConfig,\n          [county]: config,\n        };\n      });\n    });\n\n    // update insert new event into that config\n    updateCountyConfig(newCountyConfig);\n  };\n\n  return (\n    <>\n      <ExcelUploader onDropFile={onDropFile} />\n      <SelectListContainer>\n        <SelectList\n          options={countySelectOptions}\n          label=\"台灣縣市\"\n          value={selectedCounty}\n          onChange={({ value }) => {\n            onSelectCounty(value);\n          }}\n        />\n      </SelectListContainer>\n      {selectedCounty && (\n        <Draggable>\n          <TabView config={countyConfig[selectedCounty]} />\n        </Draggable>\n      )}\n      {selectedRiver && (\n        <Draggable>\n          <RiverTabView config={defaultRiverConfig[selectedRiver]} />\n        </Draggable>\n      )}\n      <Map {...mapProps}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {countyKeys.map((key) => {\n          const { geojson, style = geoJsonStyle } = countyConfig[key];\n          return (\n            <GeoJSONFillable\n              data={geojson}\n              style={(feature) => style}\n              onClick={() => {\n                onSelectCounty(key);\n              }}\n            />\n          );\n        })}\n        {riverKeys.map((key) => {\n          const { location } = defaultRiverConfig[key];\n          return (\n            <CustomizedMarker\n              position={location}\n              onClick={() => onSelectRiver(key)}\n            >\n            </CustomizedMarker>\n          );\n        })}\n      </Map>\n    </>\n  );\n};\n\nexport default MapView;\n","import React, { useState, useEffect } from 'react';\nimport MapView from './components/MapView';\n\nimport 'gestalt/dist/gestalt.css';\nimport './App.css';\n\nexport const IndexContext = React.createContext({});\n\nconst App = props => {\n  return (\n    <IndexContext.Provider>\n      <MapView />\n    </IndexContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}